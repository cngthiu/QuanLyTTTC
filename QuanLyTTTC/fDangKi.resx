<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        CEOAADh/gAA4f4AAP/+AAD//gAA//4AAP/8=
</value>
  </data>
</root>